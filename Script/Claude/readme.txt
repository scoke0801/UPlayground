프로젝트 전체를 분석하기 위해 먼저 프로젝트의 구조와 파일들을 살펴보겠습니다.

프로젝트 구조를 보니 이미 상당한 구조가 갖춰져 있네요. 이제 소스 코드들을 살펴보겠습니다. 먼저 주요 폴더들의 내용을 확인해보겠습니다.

핵심 매니저 시스템의 코드들을 살펴보겠습니다.

이제 게임 피쳐 시스템 관련 코드를 살펴보겠습니다.

이제 인벤토리와 퀘스트 시스템을 살펴보겠습니다.

## UPlayground 프로젝트 상세 분석

### 1. 프로젝트 개요 및 아키텍처

**UPlayground**는 언리얼 엔진 5.4 기반의 RPG 프로젝트로, 잘 구조화된 모듈식 아키텍처를 갖추고 있습니다.

#### 핵심 기술 스택:
- **언리얼 엔진 5.4**
- **C++ 20 표준**
- **게임 피쳐 플러그인 시스템**
- **EnhancedInput 플러그인**
- **CommonUI 플러그인**
- **'PG' 접두사 사용** (모든 사용자 정의 클래스)

### 2. 매니저 시스템 아키텍처

프로젝트의 핵심은 **중앙 집중식 매니저 시스템**입니다:

```
UPGManagerSubsystem (게임 인스턴스 서브시스템)
    ├─ IPGManager (인터페이스)
    ├─ UPGBaseManager (기본 클래스)
    ├─ UPGInventoryManager
    ├─ UPGQuestManager
    ├─ UPGSaveManager
    └─ 기타 매니저들
```

#### 매니저 서브시스템 특징:
- 게임 인스턴스 서브시스템으로 구현되어 게임 전체 생명주기 관리
- 등록된 모든 매니저를 중앙에서 관리
- 틱(Tick) 시스템을 통한 매니저 업데이트
- 게임 상태 변경 시 모든 매니저에게 알림

### 3. 게임 피쳐 플러그인 시스템

게임 피쳐 플러그인을 활용하여 기능을 모듈화:

```cpp
UPGGameFeatureManagerAction
    └─ UPGPlayerSystemFeature
        └─ UPGActionManager (플레이어 액션 및 입력 처리)
```

이 시스템의 장점:
- 기능을 동적으로 활성화/비활성화 가능
- 모듈 간 의존성 최소화
- 확장성 높은 구조

### 4. 주요 시스템 분석

#### 4.1 인벤토리 시스템
- **아이템 관리**: 추가, 제거, 확인 기능
- **용량 관리**: 최대 용량 제한 및 변경 가능
- **아이템 타입**: 기타, 소비품, 장비, 퀘스트
- **희귀도 시스템**: 일반에서 전설까지
- **자동 저장**: 설정된 간격으로 자동 저장
- **이벤트 시스템**: 인벤토리 변경 시 델리게이트 호출

#### 4.2 퀘스트 시스템
- **다양한 퀘스트 타입**: 메인, 사이드, 일일, 월드, 숨겨진 퀘스트
- **목표 시스템**: 
  - 적 처치, 아이템 수집, 상호작용, 에스코트, 장소 도달 등
  - 선택적 목표 지원
- **상태 관리**: 비활성, 활성, 완료, 실패, 포기
- **시간 제한 퀘스트**: 만료 시간 관리
- **보상 시스템**: 아이템, 통화, 경험치, 평판, 스킬
- **연계 퀘스트**: 선행/후행 퀘스트 관리

#### 4.3 저장 시스템
- **세이브 인터페이스**: `IPGSavableInterface`
- **자동 저장**: 각 매니저별 자동 저장 타이머
- **수동 저장/로드**: 유연한 데이터 관리

### 5. UI 시스템

프로젝트는 CommonUI 기반의 UI 시스템을 구축하고 있습니다:

```
UI 폴더 구조:
├─ Components (HUD 컴포넌트)
├─ Widgets (기본 위젯들)
├─ Inventory (인벤토리 UI)
├─ ListView (리스트뷰 컴포넌트)
├─ Managers (UI 매니저)
└─ Features (UI 피쳐)
```

주요 UI 클래스:
- `UPGWidgetBase`: 모든 위젯의 기본 클래스
- `UPGWindow`: 윈도우 기본 클래스
- `UPGPopup`: 팝업 UI
- `UPGTicker`: UI 틱 관리

### 6. 입력 시스템

EnhancedInput 플러그인을 커스터마이징한 시스템:
- `UPGEnhancedInputComponent`: 커스텀 입력 컴포넌트
- `UPGInputConfig`: 입력 설정 데이터 에셋
- 입력 매핑 컨텍스트 관리

### 7. 현재 구현 상태

**구현 완료된 시스템:**
- ✅ 매니저 시스템 프레임워크
- ✅ 게임 피쳐 플러그인 통합
- ✅ 인벤토리 시스템
- ✅ 퀘스트 시스템
- ✅ 저장/로드 시스템
- ✅ 기본 UI 프레임워크
- ✅ 입력 시스템 기반

**개발 진행 중이거나 필요한 시스템:**
- 🔄 캐릭터 시스템 (폴더는 있으나 구현 미완료)
- 🔄 전투 시스템
- 🔄 대화 시스템
- 🔄 스킬 시스템
- 🔄 장비 시스템
- 🔄 상호작용 시스템

### 8. 프로젝트의 장점

1. **확장성 높은 아키텍처**: 게임 피쳐 플러그인을 통한 모듈화
2. **견고한 매니저 시스템**: 중앙 집중식 관리로 효율적인 시스템 통합
3. **이벤트 기반 통신**: 델리게이트를 통한 느슨한 결합
4. **저장 시스템 통합**: 일관된 데이터 관리
5. **현대적인 C++ 사용**: C++20 표준 활용

### 9. 향후 개선 및 확장 방향

1. **전투 시스템 구현**:
   - 스킬 시스템과 연계
   - 장비 시스템 통합
   - 전투 AI 구현

2. **캐릭터 시스템 완성**:
   - 플레이어 캐릭터 구현
   - NPC 시스템 구현
   - 캐릭터 성장 시스템

3. **대화 시스템 개발**:
   - NPC 상호작용
   - 퀘스트 연계
   - 대화 트리 구현

4. **UI 시스템 확장**:
   - 인벤토리 UI 구현
   - 퀘스트 UI 구현
   - 캐릭터 정보 UI

5. **월드 상호작용**:
   - 상호작용 가능 오브젝트
   - 환경 퍼즐
   - 월드 이벤트

### 10. 결론

UPlayground 프로젝트는 견고한 기반 위에 구축된 확장 가능한 RPG 프레임워크입니다. 현대적인 언리얼 엔진 기능들(게임 피쳐 플러그인, CommonUI, EnhancedInput)을 적극 활용하고 있으며, 모듈화된 구조로 인해 새로운 기능 추가가 용이합니다.

프로젝트의 핵심 시스템들은 이미 구현되어 있어, 게임플레이에 필요한 상위 레벨 시스템들(전투, 캐릭터, 대화 등)을 추가하면 완성도 있는 RPG 게임을 만들 수 있을 것으로 보입니다.