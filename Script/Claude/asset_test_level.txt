UPlayground 테스트 레벨용 에셋 설계
언리얼 에디터에서 만들어야 할 에셋들을 상세히 설명하겠습니다. 이 에셋들은 기존 C++ 코드베이스를 활용하여 블루프린트로 구현됩니다.
1. 캐릭터 에셋
BP_PGPlayerCharacter
부모 클래스: ACharacter
컴포넌트:
- CameraComponent (카메라)
- SpringArmComponent (카메라 붐)
- PGInventoryComponent (인벤토리 컴포넌트)
- EnhancedInputComponent (향상된 입력 컴포넌트)

기능:
- 이동/회전 입력 처리
- 상호작용 입력 처리
- UI 화면 열기/닫기 입력 처리
- 인벤토리 아이템 사용 기능
BP_PGPlayerController
부모 클래스: APlayerController
컴포넌트:
- EnhancedInputLocalPlayerSubsystem (참조)

기능:
- EnhancedInput 매핑 컨텍스트 설정
- UI 표시/숨김 제어
- 게임 매니저와 통신
2. 입력 에셋 (EnhancedInput)
IA_PGMovement
입력 액션 타입: 2D Vector
입력 트리거: Any
값 변환: 없음
IA_PGLook
입력 액션 타입: 2D Vector
입력 트리거: Any
값 변환: 없음
IA_PGInteract
입력 액션 타입: Button
입력 트리거: Pressed
IA_PGToggleInventory
입력 액션 타입: Button
입력 트리거: Pressed
IA_PGToggleQuestLog
입력 액션 타입: Button
입력 트리거: Pressed
IMC_PGDefault
매핑:
- WASD/게임패드 왼쪽 스틱 → IA_PGMovement
- 마우스/게임패드 오른쪽 스틱 → IA_PGLook
- E/게임패드 X → IA_PGInteract
- I/게임패드 Y → IA_PGToggleInventory
- J/게임패드 메뉴 → IA_PGToggleQuestLog
3. NPC 에셋
BP_PGBaseNPC
부모 클래스: ACharacter
컴포넌트:
- StaticMeshComponent (외형용)
- SphereComponent (상호작용 범위)
- WidgetComponent (대화 UI 표시용)

기능:
- 플레이어 감지
- 상호작용 처리
- 대화 시스템 연동 인터페이스
BP_PGQuestNPC
부모 클래스: BP_PGBaseNPC
변수:
- AvailableQuests (Array of Quest Data)
- CompletableQuests (Array of Quest Data)

기능:
- 퀘스트 제공 로직
- 퀘스트 완료 처리
- 대화 옵션에 따른 퀘스트 상태 업데이트
BP_PGMerchantNPC
부모 클래스: BP_PGBaseNPC
변수:
- MerchantInventory (Array of Item Data)
- PriceMultiplier (float)

기능:
- 상점 UI 표시
- 아이템 구매/판매 처리
- 인벤토리 매니저와 통신
4. 상호작용 에셋
BP_PGInteractable
부모 클래스: AActor
컴포넌트:
- StaticMeshComponent
- BoxComponent (상호작용 범위)
- WidgetComponent (상호작용 프롬프트)

기능:
- 상호작용 처리 (인터페이스)
- 플레이어 감지
- 상호작용 프롬프트 표시
BP_PGItemPickup
부모 클래스: BP_PGInteractable
변수:
- ItemData (Item Data Asset)
- Quantity (int)

기능:
- 아이템 정보 표시
- 아이템 획득 처리
- 인벤토리에 아이템 추가
BP_PGQuestInteractable
부모 클래스: BP_PGInteractable
변수:
- AssociatedQuestID (Name)
- ObjectiveID (Name)
- RequiredInteractionCount (int)

기능:
- 퀘스트 목표 진행 업데이트
- 퀘스트 매니저와 통신
5. 데이터 에셋
DA_PGItemBase
부모 클래스: UDataAsset
변수:
- ItemID (Name)
- ItemName (Text)
- ItemDescription (Text)
- ItemIcon (Texture2D)
- ItemMesh (StaticMesh)
- ItemType (Enum: General, Consumable, Equipment, Quest)
- ItemRarity (Enum: Common, Uncommon, Rare, Epic, Legendary)
- MaxStackSize (int)
- Value (int)
DA_PGConsumableItem
부모 클래스: DA_PGItemBase
변수:
- EffectType (Enum: Health, Mana, Buff, etc.)
- EffectValue (float)
- Duration (float)
DA_PGEquipmentItem
부모 클래스: DA_PGItemBase
변수:
- EquipmentSlot (Enum: Head, Chest, Legs, etc.)
- StatBoosts (Map of Stat to Value)
- RequiredLevel (int)
DA_PGQuestTemplate
부모 클래스: UDataAsset
변수:
- QuestID (Name)
- QuestTitle (Text)
- QuestDescription (Text)
- QuestType (Enum: Main, Side, Daily, World, Hidden)
- QuestObjectives (Array of Objective Structures)
- QuestRewards (Array of Reward Structures)
- TimeLimit (float, optional)
- Prerequisites (Array of Quest IDs)
6. UI 에셋 (CommonUI)
WBP_PGMainHUD
부모 클래스: CommonActivatableWidget
컴포넌트:
- PlayerStatus 패널
- Objective 표시기
- Interaction 프롬프트
- 미니맵

기능:
- 플레이어 상태 표시
- 현재 퀘스트 목표 표시
- 상호작용 프롬프트 관리
WBP_PGInventoryScreen
부모 클래스: CommonActivatableWidget
컴포넌트:
- 인벤토리 그리드
- 아이템 정보 패널
- 장비 슬롯 패널
- 정렬/필터 버튼

기능:
- 인벤토리 아이템 표시
- 아이템 선택/사용/장착/버리기 처리
- 인벤토리 정렬 및 필터링
WBP_PGQuestLog
부모 클래스: CommonActivatableWidget
컴포넌트:
- 퀘스트 목록
- 퀘스트 세부정보 패널
- 퀘스트 필터 버튼

기능:
- 활성/완료/실패 퀘스트 표시
- 퀘스트 목표 진행 상태 표시
- 퀘스트 추적 설정
WBP_PGDialogueWindow
부모 클래스: CommonActivatableWidget
컴포넌트:
- NPC 이름 텍스트
- 대화 텍스트
- 대화 옵션 버튼들

기능:
- 대화 텍스트 표시
- 대화 옵션 선택 처리
- 퀘스트 시작/완료 연동
WBP_PGMerchantScreen
부모 클래스: CommonActivatableWidget
컴포넌트:
- 상인 인벤토리 그리드
- 플레이어 인벤토리 그리드
- 거래 제어 버튼
- 돈 표시기

기능:
- 상인 아이템 표시
- 구매/판매 처리
- 가격 계산
7. 디버그 에셋
BP_PGDebugConsole
부모 클래스: AActor
컴포넌트:
- WidgetComponent (콘솔 UI)

기능:
- 디버그 명령 처리
- 매니저 상태 쿼리
- 테스트 기능 제공
WBP_PGDebugPanel
부모 클래스: UserWidget
컴포넌트:
- 시스템 상태 텍스트
- 매니저 목록
- 명령 입력 필드
- 실행 버튼

기능:
- 시스템 상태 실시간 표시
- 디버그 명령 입력 및 실행
- 퀘스트 및 인벤토리 테스트 기능
8. 환경 에셋
BP_PGSimpleBuilding
부모 클래스: AActor
컴포넌트:
- 여러 StaticMeshComponent (벽, 지붕, 문 등)
- BoxComponent (충돌)

기능:
- 환경 요소로서의 기본 기능
- 문 열기/닫기 애니메이션 (선택적)
BP_PGQuestZone
부모 클래스: AActor
컴포넌트:
- BoxComponent (트리거 볼륨)
- TextRenderComponent (영역 이름 표시)

기능:
- 퀘스트 영역 진입/이탈 감지
- 특정 퀘스트 목표 업데이트 트리거
9. 게임플레이 에셋
BP_PGGameMode
부모 클래스: AGameModeBase

기능:
- 플레이어 캐릭터 및 컨트롤러 클래스 지정
- 기본 게임플레이 규칙 설정
BP_PGGameInstance
부모 클래스: UGameInstance

기능:
- 매니저 서브시스템 참조
- 게임 전체 상태 저장
이 에셋들을 만들면 UPlayground RPG 프로젝트의 테스트 레벨을 구성하는 데 필요한 모든 구성 요소가 준비됩니다. 블루프린트 로직을 구현할 때는 기존의 C++ 매니저 시스템, 인벤토리 시스템, 퀘스트 시스템을 적절히 활용해야 합니다.




-------------------------------------------------------------------
# UPlayground 테스트 레벨 에셋 제작 가이드

## 목차
1. [프로젝트 설정](#1-프로젝트-설정)
2. [캐릭터 에셋](#2-캐릭터-에셋)
3. [입력 에셋](#3-입력-에셋-enhancedinput)
4. [NPC 에셋](#4-npc-에셋)
5. [상호작용 에셋](#5-상호작용-에셋)
6. [데이터 에셋](#6-데이터-에셋)
7. [UI 에셋](#7-ui-에셋-commonui)
8. [디버그 에셋](#8-디버그-에셋)
9. [환경 에셋](#9-환경-에셋)
10. [게임플레이 에셋](#10-게임플레이-에셋)
11. [테스트 레벨 구성](#11-테스트-레벨-구성)

## 1. 프로젝트 설정

### 1.1 필요한 플러그인 확인
1. **에디터 메뉴** > **Edit** > **Plugins** 열기
2. 다음 플러그인이 활성화되어 있는지 확인:
   - Game Features
   - Modular Gameplay
   - Enhanced Input
   - Common UI
3. 활성화되지 않은 플러그인이 있다면 체크하고 에디터 재시작

### 1.2 프로젝트 폴더 구조 설정
1. Content 폴더에 다음 하위 폴더 생성:
   ```
   /Content
     /UPlayground
       /Blueprints
         /Characters
         /Controllers
         /NPCs
         /Interactables
       /Data
         /Items
         /Quests
       /Input
       /UI
         /HUD
         /Inventory
         /Quests
         /Dialogue
         /Debug
       /Maps
       /Environment
         /Buildings
         /Props
         /Zones
   ```

## 2. 캐릭터 에셋

### 2.1 BP_PGPlayerCharacter 생성

1. **콘텐츠 브라우저** > **/UPlayground/Blueprints/Characters** 폴더로 이동
2. **우클릭** > **Blueprint Class** > **Character** 선택
3. 이름을 `BP_PGPlayerCharacter`로 설정하고 생성
4. 블루프린트 에디터에서:
   
   **컴포넌트 추가:**
   1. 컴포넌트 패널에서 **Add Component** > **Spring Arm** 선택
      - Name: `CameraBoom`
      - Transform > Location: `(0, 0, 90)`
      - Transform > Rotation: `(0, -45, 0)`
      - Camera Settings > Target Arm Length: `400`
      - Camera Settings > Use Pawn Control Rotation: `True`
      
   2. `CameraBoom`을 선택한 상태에서 **Add Component** > **Camera** 선택
      - Name: `FollowCamera`
      
   3. **Add Component** > **Scene Component** 선택
      - Name: `InteractionPoint`
      - Transform > Location: `(100, 0, 0)`
      
   4. C++ 클래스 `UPGInventoryComponent`를 상속한 컴포넌트 추가:
      - **Add Component** > **PGInventoryComponent** 선택
      - Name: `InventoryComponent`
      - Details > Inventory Size: `30` (또는 원하는 값)

   **블루프린트 그래프 설정:**
   1. **Event Graph**에서 **Event BeginPlay** 노드 추가
   2. 다음 로직 구현:
      - 플레이어 컨트롤러 가져오기
      - 인벤토리 컴포넌트 초기화
      - 기본 제어 매핑 설정

   **입력 처리:**
   1. **Class Defaults** > **Input** 섹션에서 **Use Enhanced Input System** 체크
   2. 다음 함수 생성:
      - `SetupPlayerInputComponent` 오버라이드
      - `Move` (이동 처리)
      - `Look` (시점 제어)
      - `Interact` (상호작용)
      - `ToggleInventory` (인벤토리 UI 토글)
      - `ToggleQuestLog` (퀘스트 UI 토글)

5. **컴파일** 및 **저장**

### 2.2 BP_PGPlayerController 생성

1. **콘텐츠 브라우저** > **/UPlayground/Blueprints/Controllers** 폴더로 이동
2. **우클릭** > **Blueprint Class** > **Player Controller** 선택
3. 이름을 `BP_PGPlayerController`로 설정하고 생성
4. 블루프린트 에디터에서:
   
   **변수 추가:**
   - `InventoryWidget` (WBP_PGInventoryScreen 타입)
   - `QuestLogWidget` (WBP_PGQuestLog 타입)
   - `MainHUDWidget` (WBP_PGMainHUD 타입)
   - `DialogueWidget` (WBP_PGDialogueWindow 타입)
   - `DefaultMappingContext` (InputMappingContext 타입)
   
   **함수 추가:**
   - `SetupInputComponent` (Enhanced Input 설정)
   - `CreateAndInitializeWidgets` (UI 위젯 생성)
   - `ToggleInventoryUI` (인벤토리 표시/숨김)
   - `ToggleQuestLogUI` (퀘스트 로그 표시/숨김)
   - `ShowDialogueUI` (대화 UI 표시)
   - `HideDialogueUI` (대화 UI 숨김)
   - `GetPGManagerSubsystem` (매니저 서브시스템 참조 반환)
   
   **Event Graph 설정:**
   - **Event BeginPlay**에서:
     - 위젯 생성 및 초기화
     - 입력 매핑 컨텍스트 설정
     - MainHUD 위젯 추가

5. **컴파일** 및 **저장**

## 3. 입력 에셋 (EnhancedInput)

### 3.1 입력 액션 생성

#### IA_PGMovement
1. **콘텐츠 브라우저** > **/UPlayground/Input** 폴더로 이동
2. **우클릭** > **Input** > **Input Action** 선택
3. 이름을 `IA_PGMovement`로 설정하고 생성
4. 에셋 에디터에서:
   - **Value Type**: `Vector2D`
   - **Triggers**: `Triggered`
   - **Modifiers**: 없음
5. **저장**

#### IA_PGLook
1. **콘텐츠 브라우저** > **/UPlayground/Input** 폴더로 이동
2. **우클릭** > **Input** > **Input Action** 선택
3. 이름을 `IA_PGLook`로 설정하고 생성
4. 에셋 에디터에서:
   - **Value Type**: `Vector2D`
   - **Triggers**: `Triggered`
   - **Modifiers**: 없음
5. **저장**

#### IA_PGInteract
1. **콘텐츠 브라우저** > **/UPlayground/Input** 폴더로 이동
2. **우클릭** > **Input** > **Input Action** 선택
3. 이름을 `IA_PGInteract`로 설정하고 생성
4. 에셋 에디터에서:
   - **Value Type**: `Boolean`
   - **Triggers**: `Pressed`
   - **Modifiers**: 없음
5. **저장**

#### IA_PGToggleInventory
1. **콘텐츠 브라우저** > **/UPlayground/Input** 폴더로 이동
2. **우클릭** > **Input** > **Input Action** 선택
3. 이름을 `IA_PGToggleInventory`로 설정하고 생성
4. 에셋 에디터에서:
   - **Value Type**: `Boolean`
   - **Triggers**: `Pressed`
   - **Modifiers**: 없음
5. **저장**

#### IA_PGToggleQuestLog
1. **콘텐츠 브라우저** > **/UPlayground/Input** 폴더로 이동
2. **우클릭** > **Input** > **Input Action** 선택
3. 이름을 `IA_PGToggleQuestLog`로 설정하고 생성
4. 에셋 에디터에서:
   - **Value Type**: `Boolean`
   - **Triggers**: `Pressed`
   - **Modifiers**: 없음
5. **저장**

### 3.2 입력 매핑 컨텍스트 생성

#### IMC_PGDefault
1. **콘텐츠 브라우저** > **/UPlayground/Input** 폴더로 이동
2. **우클릭** > **Input** > **Input Mapping Context** 선택
3. 이름을 `IMC_PGDefault`로 설정하고 생성
4. 에셋 에디터에서 다음 매핑 추가:
   
   **WASD 이동:**
   - **Input Action**: `IA_PGMovement`
   - **Key**: `W` (Forward)
     - **Modifiers**: Scale: `1.0`
   - **Key**: `S` (Backward)
     - **Modifiers**: Scale: `-1.0`
   - **Key**: `A` (Left)
     - **Modifiers**: Scale: `-1.0`
   - **Key**: `D` (Right)
     - **Modifiers**: Scale: `1.0`
   
   **게임패드 이동:**
   - **Input Action**: `IA_PGMovement`
   - **Key**: `Gamepad Left Thumbstick X-Axis`, `Gamepad Left Thumbstick Y-Axis`
   
   **마우스 시점:**
   - **Input Action**: `IA_PGLook`
   - **Key**: `Mouse X`, `Mouse Y`
   
   **게임패드 시점:**
   - **Input Action**: `IA_PGLook`
   - **Key**: `Gamepad Right Thumbstick X-Axis`, `Gamepad Right Thumbstick Y-Axis`
   
   **상호작용:**
   - **Input Action**: `IA_PGInteract`
   - **Key**: `E`
   - **Key**: `Gamepad Face Button Right` (X버튼)
   
   **인벤토리 토글:**
   - **Input Action**: `IA_PGToggleInventory`
   - **Key**: `I`
   - **Key**: `Gamepad Face Button Top` (Y버튼)
   
   **퀘스트 로그 토글:**
   - **Input Action**: `IA_PGToggleQuestLog`
   - **Key**: `J`
   - **Key**: `Gamepad Special Right` (Menu 버튼)

5. **저장**

## 4. NPC 에셋

### 4.1 BP_PGBaseNPC 생성

1. **콘텐츠 브라우저** > **/UPlayground/Blueprints/NPCs** 폴더로 이동
2. **우클릭** > **Blueprint Class** > **Character** 선택
3. 이름을 `BP_PGBaseNPC`로 설정하고 생성
4. 블루프린트 에디터에서:
   
   **컴포넌트 추가:**
   1. 기본 **Mesh** 컴포넌트 설정:
      - Mesh > Skeletal Mesh: 적절한 캐릭터 메시 선택
      
   2. **Add Component** > **Sphere** 선택
      - Name: `InteractionSphere`
      - Transform > Location: `(0, 0, 0)`
      - Shape > Sphere Radius: `200`
      - Collision > Collision Presets: `OverlapAllDynamic`
      
   3. **Add Component** > **Widget** 선택
      - Name: `OverheadWidget`
      - Transform > Location: `(0, 0, 120)`
      - Widget > Widget Class: 나중에 생성할 `WBP_PGNPCInfo` 위젯 지정
      - Widget > Draw Size: `(200, 50)`
      - Rendering > Space: `World`
      - Rendering > Widget Target: `Camera`
      
   **인터페이스 추가:**
   - **Class Settings** > **Interfaces** > **Add** > `IPGInteractable` 인터페이스 추가 (프로젝트에 있다면)
   
   **변수 추가:**
   - `NPCName` (String)
   - `InteractionPrompt` (Text)
   - `CanInteract` (Boolean)
   - `CurrentInteractingPlayer` (Object Reference - Character)
   
   **함수 추가:**
   - `OnInteract` (상호작용 처리)
   - `UpdateInteractionPrompt` (상호작용 프롬프트 갱신)
   - `IsInteractable` (상호작용 가능 여부 확인)
   
   **Event Graph 설정:**
   - **Event BeginPlay**에서 초기 설정
   - **InteractionSphere** 컴포넌트의 `OnComponentBeginOverlap`/`OnComponentEndOverlap` 이벤트 처리

5. **컴파일** 및 **저장**

### 4.2 BP_PGQuestNPC 생성

1. **콘텐츠 브라우저** > **/UPlayground/Blueprints/NPCs** 폴더로 이동
2. **우클릭** > **Blueprint Class** 선택
3. **BP_PGBaseNPC** 클래스 선택
4. 이름을 `BP_PGQuestNPC`로 설정하고 생성
5. 블루프린트 에디터에서:
   
   **변수 추가:**
   - `AvailableQuests` (Array of Quest Data References)
   - `CompletableQuests` (Array of Quest Data References)
   - `QuestManager` (Object Reference - UPGQuestManager)
   
   **함수 추가:**
   - `GetAvailableQuests` (사용 가능한 퀘스트 목록 반환)
   - `GetCompletableQuests` (완료 가능한 퀘스트 목록 반환)
   - `OfferQuest` (퀘스트 제공)
   - `CompleteQuest` (퀘스트 완료 처리)
   - `GetQuestManager` (퀘스트 매니저 참조 가져오기)
   
   **OnInteract 함수 오버라이드:**
   - 대화 UI 표시 로직 추가
   - 퀘스트 상태에 따른 대화 옵션 설정
   
   **Event Graph 설정:**
   - **Event BeginPlay**에서 퀘스트 매니저 참조 가져오기

6. **컴파일** 및 **저장**

### 4.3 BP_PGMerchantNPC 생성

1. **콘텐츠 브라우저** > **/UPlayground/Blueprints/NPCs** 폴더로 이동
2. **우클릭** > **Blueprint Class** 선택
3. **BP_PGBaseNPC** 클래스 선택
4. 이름을 `BP_PGMerchantNPC`로 설정하고 생성
5. 블루프린트 에디터에서:
   
   **변수 추가:**
   - `MerchantInventory` (Array of Item Data References)
   - `PriceMultiplier` (Float, Default: 1.0)
   - `ItemManager` (Object Reference - UPGItemManager)
   
   **함수 추가:**
   - `GetMerchantInventory` (상인 인벤토리 반환)
   - `BuyItem` (아이템 구매 처리)
   - `SellItem` (아이템 판매 처리)
   - `GetItemManager` (아이템 매니저 참조 가져오기)
   
   **OnInteract 함수 오버라이드:**
   - 상점 UI 표시 로직 추가
   
   **Event Graph 설정:**
   - **Event BeginPlay**에서 아이템 매니저 참조 가져오기
   - 상인 인벤토리 초기화

6. **컴파일** 및 **저장**

## 5. 상호작용 에셋

### 5.1 BP_PGInteractable 생성

1. **콘텐츠 브라우저** > **/UPlayground/Blueprints/Interactables** 폴더로 이동
2. **우클릭** > **Blueprint Class** > **Actor** 선택
3. 이름을 `BP_PGInteractable`로 설정하고 생성
4. 블루프린트 에디터에서:
   
   **컴포넌트 추가:**
   1. **Add Component** > **Static Mesh** 선택
      - Name: `Mesh`
      - Mesh > Static Mesh: 적절한 메시 선택
      
   2. **Add Component** > **Box** 선택
      - Name: `InteractionBox`
      - Transform > Location: `(0, 0, 0)`
      - Shape > X, Y, Z: 적절한 크기 설정
      - Collision > Collision Presets: `OverlapAllDynamic`
      
   3. **Add Component** > **Widget** 선택
      - Name: `InteractionWidget`
      - Transform > Location: `(0, 0, 100)`
      - Widget > Widget Class: 나중에 생성할 `WBP_PGInteractionPrompt` 위젯 지정
      - Widget > Draw Size: `(150, 50)`
      - Rendering > Space: `World`
      - Rendering > Widget Target: `Camera`
      - Advanced > Visibility: `Hidden`
      
   **인터페이스 추가:**
   - **Class Settings** > **Interfaces** > **Add** > `IPGInteractable` 인터페이스 추가 (프로젝트에 있다면)
   
   **변수 추가:**
   - `InteractionPrompt` (Text)
   - `CanInteract` (Boolean, Default: True)
   - `CurrentInteractingPlayer` (Object Reference - Character)
   
   **함수 추가:**
   - `OnInteract` (상호작용 처리)
   - `ShowInteractionWidget` (상호작용 위젯 표시)
   - `HideInteractionWidget` (상호작용 위젯 숨김)
   - `IsInteractable` (상호작용 가능 여부 확인)
   
   **Event Graph 설정:**
   - **InteractionBox** 컴포넌트의 `OnComponentBeginOverlap`/`OnComponentEndOverlap` 이벤트 처리
   - 상호작용 위젯 표시/숨김 로직

5. **컴파일** 및 **저장**

### 5.2 BP_PGItemPickup 생성

1. **콘텐츠 브라우저** > **/UPlayground/Blueprints/Interactables** 폴더로 이동
2. **우클릭** > **Blueprint Class** 선택
3. **BP_PGInteractable** 클래스 선택
4. 이름을 `BP_PGItemPickup`로 설정하고 생성
5. 블루프린트 에디터에서:
   
   **변수 추가:**
   - `ItemData` (Object Reference - DA_PGItemBase)
   - `Quantity` (Integer, Default: 1)
   - `ItemManager` (Object Reference - UPGItemManager)
   
   **함수 추가:**
   - `PickupItem` (아이템 획득 처리)
   - `UpdateMesh` (아이템 메시 업데이트)
   - `GetItemManager` (아이템 매니저 참조 가져오기)
   
   **OnInteract 함수 오버라이드:**
   - 아이템 획득 처리
   - 인벤토리에 아이템 추가
   - 상호작용 처리 후 액터 제거
   
   **Event Graph 설정:**
   - **Event BeginPlay**에서:
     - 아이템 매니저 참조 가져오기
     - 아이템 데이터에 따라 메시 업데이트
     - 상호작용 프롬프트 설정

6. **컴파일** 및 **저장**

### 5.3 BP_PGQuestInteractable 생성

1. **콘텐츠 브라우저** > **/UPlayground/Blueprints/Interactables** 폴더로 이동
2. **우클릭** > **Blueprint Class** 선택
3. **BP_PGInteractable** 클래스 선택
4. 이름을 `BP_PGQuestInteractable`로 설정하고 생성
5. 블루프린트 에디터에서:
   
   **변수 추가:**
   - `AssociatedQuestID` (Name)
   - `ObjectiveID` (Name)
   - `RequiredInteractionCount` (Integer, Default: 1)
   - `CurrentInteractionCount` (Integer, Default: 0)
   - `QuestManager` (Object Reference - UPGQuestManager)
   
   **함수 추가:**
   - `UpdateQuestObjective` (퀘스트 목표 업데이트)
   - `IsObjectiveActive` (목표가 활성 상태인지 확인)
   - `GetQuestManager` (퀘스트 매니저 참조 가져오기)
   
   **OnInteract 함수 오버라이드:**
   - 퀘스트 목표 진행 상태 업데이트
   - 목표 완료 시 추가 액션
   
   **Event Graph 설정:**
   - **Event BeginPlay**에서 퀘스트 매니저 참조 가져오기

6. **컴파일** 및 **저장**

## 6. 데이터 에셋

### 6.1 DA_PGItemBase 생성

1. **콘텐츠 브라우저** > **/UPlayground/Data/Items** 폴더로 이동
2. **우클릭** > **Miscellaneous** > **Data Asset** 선택
3. **Primary Data Asset** 타입 또는 가장 유사한 UPGItemBase 클래스 선택
4. 이름을 `DA_PGItemBase`로 설정하고 생성
5. 데이터 에셋 에디터에서:
   
   **다음 프로퍼티 설정:**
   - `ItemID` (Name)
   - `ItemName` (Text)
   - `ItemDescription` (Text)
   - `ItemIcon` (Texture2D)
   - `ItemMesh` (StaticMesh)
   - `ItemType` (Enum: General, Consumable, Equipment, Quest)
   - `ItemRarity` (Enum: Common, Uncommon, Rare, Epic, Legendary)
   - `MaxStackSize` (Integer)
   - `Value` (Integer)

6. **저장**

### 6.2 DA_PGConsumableItem 생성

1. **콘텐츠 브라우저** > **/UPlayground/Data/Items** 폴더로 이동
2. **우클릭** > **Miscellaneous** > **Data Asset** 선택
3. 이전에 생성한 `DA_PGItemBase` 클래스 또는 가장 유사한 UPGConsumableItem 클래스 선택
4. 이름을 `DA_PGConsumableItem`로 설정하고 생성
5. 데이터 에셋 에디터에서:
   
   **기본 아이템 프로퍼티 설정:**
   - 필요한 기본 아이템 속성 설정
   
   **추가 프로퍼티 설정:**
   - `EffectType` (Enum: Health, Mana, Buff, etc.)
   - `EffectValue` (Float)
   - `Duration` (Float)

6. **저장**

### 6.3 DA_PGEquipmentItem 생성

1. **콘텐츠 브라우저** > **/UPlayground/Data/Items** 폴더로 이동
2. **우클릭** > **Miscellaneous** > **Data Asset** 선택
3. 이전에 생성한 `DA_PGItemBase` 클래스 또는 가장 유사한 UPGEquipmentItem 클래스 선택
4. 이름을 `DA_PGEquipmentItem`로 설정하고 생성
5. 데이터 에셋 에디터에서:
   
   **기본 아이템 프로퍼티 설정:**
   - 필요한 기본 아이템 속성 설정
   
   **추가 프로퍼티 설정:**
   - `EquipmentSlot` (Enum: Head, Chest, Legs, etc.)
   - `StatBoosts` (Map of Stat to Value)
   - `RequiredLevel` (Integer)

6. **저장**

### 6.4 DA_PGQuestTemplate 생성

1. **콘텐츠 브라우저** > **/UPlayground/Data/Quests** 폴더로 이동
2. **우클릭** > **Miscellaneous** > **Data Asset** 선택
3. **Primary Data Asset** 또는 가장 유사한 UPGQuestTemplate 클래스 선택
4. 이름을 `DA_PGQuestTemplate`로 설정하고 생성
5. 데이터 에셋 에디터에서:
   
   **다음 프로퍼티 설정:**
   - `QuestID` (Name)
   - `QuestTitle` (Text)
   - `QuestDescription` (Text)
   - `QuestType` (Enum: Main, Side, Daily, World, Hidden)
   - 목표 및 보상 구조체 배열을 위한 설정

6. **저장**

## 7. UI 에셋 (CommonUI)

### 7.1 WBP_PGMainHUD 생성

1. **콘텐츠 브라우저** > **/UPlayground/UI/HUD** 폴더로 이동
2. **우클릭** > **User Interface** > **Widget Blueprint** 선택
3. Parent Class로 `CommonActivatableWidget` 선택
4. 이름을 `WBP_PGMainHUD`로 설정하고 생성
5. 위젯 에디터에서:
   
   **UI 컴포넌트 추가:**
   - **Canvas Panel** (루트 위젯)
     - **Vertical Box** (왼쪽 상단, 플레이어 상태용)
       - **Text Block** (이름 표시)
       - **Progress Bar** (체력 바)
       - **Progress Bar** (마나 바, 있다면)
     - **Vertical Box** (오른쪽 상단, 현재 퀘스트 목표용)
       - **Text Block** (현재 추적 중인 퀘스트 제목)
       - **Border**
         - **Scroll Box**
           - **Vertical Box** (목표 목록 컨테이너)
     - **Border** (화면 하단 중앙, 상호작용 프롬프트용)
       - **Text Block** (상호작용 텍스트)
   
   **변수 추가:**
   - `PlayerRef` (Object Reference - BP_PGPlayerCharacter)
   - `QuestManager` (Object Reference - UPGQuestManager)
   
   **함수 추가:**
   - `UpdatePlayerInfo` (플레이어 정보 갱신)
   - `UpdateQuestObjectives` (퀘스트 목표 표시 갱신)
   - `ShowInteractionPrompt` (상호작용 프롬프트 표시)
   - `HideInteractionPrompt` (상호작용 프롬프트 숨김)
   
   **Event Graph 설정:**
   - **Event Construct**에서 초기 참조 설정
   - 주기적인 UI 갱신을 위한 타이머 설정

6. **컴파일** 및 **저장**

### 7.2 WBP_PGInventoryScreen 생성

1. **콘텐츠 브라우저** > **/UPlayground/UI/Inventory** 폴더로 이동
2. **우클릭** > **User Interface** > **Widget Blueprint** 선택
3. Parent Class로 `CommonActivatableWidget` 선택
4. 이름을 `WBP_PGInventoryScreen`로 설정하고 생성
5. 위젯 에디터에서:
   
   **UI 컴포넌트 추가:**
   - **Canvas Panel** (루트 위젯)
     - **Border** (배경)
       - **Horizontal Box** (메인 레이아웃)
         - **Vertical Box** (왼쪽 패널, 인벤토리 그리드용)
           - **Text Block** (제목: "인벤토리")
           - **Uniform Grid Panel** (아이템 슬롯 그리드)
             - 여러 개의 아이템 슬롯 위젯 추가
           - **Horizontal Box** (필터 및 정렬 버튼 컨테이너)
         - **Vertical Box** (오른쪽 패널, 아이템 정보 및 장비 슬롯용)
           - **Border** (아이템 정보 패널)
             - **Vertical Box**
               - **Image** (아이템 아이콘)
               - **Text Block** (아이템 이름)
               - **Text Block** (아이템 설명)
               - **Text Block** (아이템 통계)
           - **Vertical Box** (장비 슬롯 컨테이너)
             - 여러 개의 장비 슬롯 위젯 추가
           - **Horizontal Box** (액션 버튼 컨테이너)
             - **Button** (사용 버튼)
             - **Button** (장착 버튼)
             - **Button** (버리기 버튼)
   
   **변수 추가:**
   - `PlayerRef` (Object Reference - BP_PGPlayerCharacter)
   - `InventoryComponent` (Object Reference - UPGInventoryComponent)
   - `SelectedItem` (Object Reference - UPGItem)
   - `ItemSlots` (Array of WBP_PGItemSlot Widgets)
   
   **함수 추가:**
   - `InitializeInventory` (인벤토리 초기화)
   - `RefreshInventory` (인벤토리 표시 갱신)
   - `SelectItem` (아이템 선택)
   - `UseSelectedItem` (선택된 아이템 사용)
   - `EquipSelectedItem` (선택된 아이템 장착)
   - `DropSelectedItem` (선택된 아이템 버리기)
   
   **Event Graph 설정:**
   - **Event Construct**에서 초기 참조 설정 및 인벤토리 초기화

6. **컴파일** 및 **저장**

### 7.3 WBP_PGItemSlot 생성 (인벤토리 슬롯 위젯)

1. **콘텐츠 브라우저** > **/UPlayground/UI/Inventory** 폴더로 이동
2. **우클릭** > **User Interface** > **Widget Blueprint** 선택
3. Parent Class로 `UserWidget` 선택
4. 이름을 `WBP_PGItemSlot`로 설정하고 생성
5. 위젯 에디터에서:
   
   **UI 컴포넌트 추가:**
   - **Button** (루트 위젯)
     - **Border** (배경)
       - **Overlay**
         - **Image** (아이템 아이콘)
         - **Text Block** (아이템 수량, 오른쪽 하단)
   
   **변수 추가:**
   - `ItemRef` (Object Reference - UPGItem)
   - `SlotIndex` (Integer)
   - `ParentInventory` (Object Reference - WBP_PGInventoryScreen)
   
   **함수 추가:**
   - `UpdateSlot` (슬롯 정보 갱신)
   - `ClearSlot` (슬롯 비우기)
   - `OnClicked` (클릭 처리)
   
   **Event Graph 설정:**
   - 버튼 클릭 이벤트 처리

6. **컴파일** 및 **저장**

### 7.4 WBP_PGQuestLog 생성

1. **콘텐츠 브라우저** > **/UPlayground/UI/Quests** 폴더로 이동
2. **우클릭** > **User Interface** > **Widget Blueprint** 선택
3. Parent Class로 `CommonActivatableWidget` 선택
4. 이름을 `WBP_PGQuestLog`로 설정하고 생성
5. 위젯 에디터에서:
   
   **UI 컴포넌트 추가:**
   - **Canvas Panel** (루트 위젯)
     - **Border** (배경)
       - **Horizontal Box** (메인 레이아웃)
         - **Vertical Box** (왼쪽 패널, 퀘스트 목록용)
           - **Text Block** (제목: "퀘스트")
           - **Horizontal Box** (필터 버튼 컨테이너)
             - **Button** (모든 퀘스트)
             - **Button** (메인 퀘스트)
             - **Button** (사이드 퀘스트)
             - **Button** (일일 퀘스트)
           - **Scroll Box**
             - **Vertical Box** (퀘스트 항목 컨테이너)
         - **Vertical Box** (오른쪽 패널, 퀘스트 세부 정보용)
           - **Text Block** (퀘스트 제목)
           - **Text Block** (퀘스트 설명)
           - **Border**
             - **Scroll Box**
               - **Vertical Box** (목표 컨테이너)
           - **Border**
             - **Vertical Box** (보상 컨테이너)
           - **Horizontal Box** (액션 버튼 컨테이너)
             - **Button** (추적 버튼)
             - **Button** (포기 버튼)
   
   **변수 추가:**
   - `QuestManager` (Object Reference - UPGQuestManager)
   - `SelectedQuest` (Object Reference - UPGQuest)
   - `ActiveFilter` (Enum: All, Main, Side, Daily)
   
   **함수 추가:**
   - `InitializeQuestLog` (퀘스트 로그 초기화)
   - `RefreshQuestList` (퀘스트 목록 갱신)
   - `SelectQuest` (퀘스트 선택)
   - `DisplayQuestDetails` (퀘스트 세부 정보 표시)
   - `SetQuestFilter` (퀘스트 필터 설정)
   - `TrackQuest` (퀘스트 추적 설정)
   - `AbandonQuest` (퀘스트 포기)
   
   **Event Graph 설정:**
   - **Event Construct**에서 초기 참조 설정 및 퀘스트 로그 초기화

6. **컴파일** 및 **저장**

### 7.5 WBP_PGDialogueWindow 생성

1. **콘텐츠 브라우저** > **/UPlayground/UI/Dialogue** 폴더로 이동
2. **우클릭** > **User Interface** > **Widget Blueprint** 선택
3. Parent Class로 `CommonActivatableWidget` 선택
4. 이름을 `WBP_PGDialogueWindow`로 설정하고 생성
5. 위젯 에디터에서:
   
   **UI 컴포넌트 추가:**
   - **Canvas Panel** (루트 위젯)
     - **Border** (배경)
       - **Vertical Box** (메인 레이아웃)
         - **Text Block** (NPC 이름)
         - **Border**
           - **Text Block** (대화 텍스트)
         - **Scroll Box**
           - **Vertical Box** (대화 옵션 컨테이너)
   
   **변수 추가:**
   - `CurrentNPC` (Object Reference - BP_PGBaseNPC)
   - `DialogueOptions` (Array of Dialogue Option Structures)
   
   **함수 추가:**
   - `InitializeDialogue` (대화 초기화)
   - `DisplayDialogue` (대화 텍스트 표시)
   - `UpdateDialogueOptions` (대화 옵션 업데이트)
   - `SelectDialogueOption` (대화 옵션 선택)
   - `CloseDialogue` (대화 종료)
   
   **Event Graph 설정:**
   - **Event Construct**에서 초기 설정

6. **컴파일** 및 **저장**

### 7.6 WBP_PGMerchantScreen 생성

1. **콘텐츠 브라우저** > **/UPlayground/UI/Inventory** 폴더로 이동
2. **우클릭** > **User Interface** > **Widget Blueprint** 선택
3. Parent Class로 `CommonActivatableWidget` 선택
4. 이름을 `WBP_PGMerchantScreen`로 설정하고 생성
5. 위젯 에디터에서:
   
   **UI 컴포넌트 추가:**
   - **Canvas Panel** (루트 위젯)
     - **Border** (배경)
       - **Vertical Box** (메인 레이아웃)
         - **Horizontal Box** (상단 정보 패널)
           - **Text Block** (상인 이름)
           - **Text Block** (플레이어 골드)
         - **Horizontal Box** (인벤토리 패널)
           - **Vertical Box** (상인 인벤토리)
             - **Text Block** (제목: "상인")
             - **Uniform Grid Panel** (상인 아이템 그리드)
           - **Vertical Box** (플레이어 인벤토리)
             - **Text Block** (제목: "내 인벤토리")
             - **Uniform Grid Panel** (플레이어 아이템 그리드)
         - **Vertical Box** (선택된 아이템 정보)
           - **Border**
             - **Vertical Box**
               - **Image** (아이템 아이콘)
               - **Text Block** (아이템 이름)
               - **Text Block** (아이템 설명)
               - **Text Block** (아이템 가격)
           - **Horizontal Box** (액션 버튼)
             - **Button** (구매 버튼)
             - **Button** (판매 버튼)
             - **Button** (취소 버튼)
   
   **변수 추가:**
   - `MerchantNPC` (Object Reference - BP_PGMerchantNPC)
   - `PlayerRef` (Object Reference - BP_PGPlayerCharacter)
   - `SelectedItem` (Object Reference - UPGItem)
   - `IsPlayerItemSelected` (Boolean)
   
   **함수 추가:**
   - `InitializeMerchantUI` (상인 UI 초기화)
   - `RefreshMerchantInventory` (상인 인벤토리 갱신)
   - `RefreshPlayerInventory` (플레이어 인벤토리 갱신)
   - `SelectMerchantItem` (상인 아이템 선택)
   - `SelectPlayerItem` (플레이어 아이템 선택)
   - `BuySelectedItem` (선택된 아이템 구매)
   - `SellSelectedItem` (선택된 아이템 판매)
   
   **Event Graph 설정:**
   - **Event Construct**에서 초기 참조 설정 및 UI 초기화

6. **컴파일** 및 **저장**

## 8. 디버그 에셋

### 8.1 BP_PGDebugConsole 생성

1. **콘텐츠 브라우저** > **/UPlayground/UI/Debug** 폴더로 이동
2. **우클릭** > **Blueprint Class** > **Actor** 선택
3. 이름을 `BP_PGDebugConsole`로 설정하고 생성
4. 블루프린트 에디터에서:
   
   **컴포넌트 추가:**
   - **Add Component** > **Widget** 선택
     - Name: `DebugWidget`
     - Widget > Widget Class: 나중에 생성할 `WBP_PGDebugPanel` 위젯 지정
     - Rendering > Space: `Screen`
     - Rendering > Draw at Desired Size: `True`
     - Advanced > Visibility: `Hidden`
   
   **변수 추가:**
   - `IsConsoleVisible` (Boolean, Default: False)
   - `ManagerSubsystem` (Object Reference - UPGManagerSubsystem)
   
   **함수 추가:**
   - `ToggleConsole` (콘솔 표시/숨김 전환)
   - `ExecuteCommand` (디버그 명령 실행)
   - `GetManagerStatus` (매니저 상태 정보 가져오기)
   
   **Event Graph 설정:**
   - **Event BeginPlay**에서 매니저 서브시스템 참조 가져오기
   - 디버그 키 입력 처리 로직

5. **컴파일** 및 **저장**

### 8.2 WBP_PGDebugPanel 생성

1. **콘텐츠 브라우저** > **/UPlayground/UI/Debug** 폴더로 이동
2. **우클릭** > **User Interface** > **Widget Blueprint** 선택
3. Parent Class로 `UserWidget` 선택
4. 이름을 `WBP_PGDebugPanel`로 설정하고 생성
5. 위젯 에디터에서:
   
   **UI 컴포넌트 추가:**
   - **Canvas Panel** (루트 위젯)
     - **Border** (배경)
       - **Vertical Box** (메인 레이아웃)
         - **Text Block** (제목: "디버그 콘솔")
         - **Scroll Box**
           - **Vertical Box** (로그 메시지 컨테이너)
         - **Horizontal Box** (명령 입력 컨트롤)
           - **EditableText** (명령 입력 필드)
           - **Button** (실행 버튼)
         - **Vertical Box** (퀵 액션 버튼)
           - **Button** (모든 퀘스트 완료)
           - **Button** (플레이어 위치 로깅)
           - **Button** (아이템 생성)
   
   **변수 추가:**
   - `DebugConsole` (Object Reference - BP_PGDebugConsole)
   - `LogMessages` (Array of Strings)
   
   **함수 추가:**
   - `AddLogMessage` (로그 메시지 추가)
   - `ExecuteCommand` (명령 실행)
   - `UpdateManagerStatus` (매니저 상태 갱신)
   - `SpawnTestItem` (테스트 아이템 생성)
   - `CompleteAllQuests` (모든 퀘스트 완료)
   
   **Event Graph 설정:**
   - **Event Construct**에서 초기 참조 설정
   - 버튼 클릭 이벤트 처리
   - 명령 입력 처리

6. **컴파일** 및 **저장**

## 9. 환경 에셋

### 9.1 BP_PGSimpleBuilding 생성

1. **콘텐츠 브라우저** > **/UPlayground/Environment/Buildings** 폴더로 이동
2. **우클릭** > **Blueprint Class** > **Actor** 선택
3. 이름을 `BP_PGSimpleBuilding`로 설정하고 생성
4. 블루프린트 에디터에서:
   
   **컴포넌트 추가:**
   - **Add Component** > **Static Mesh** 선택 (여러 개 추가)
     - Name: `WallMesh`, `RoofMesh`, `FloorMesh`, `DoorMesh` 등
     - Mesh > Static Mesh: 적절한 건물 부품 메시 선택
   
   - **Add Component** > **Box** 선택
     - Name: `CollisionBox`
     - Transform > Location: `(0, 0, 0)`
     - Shape > X, Y, Z: 건물 크기에 맞게 설정
     - Collision > Collision Presets: `BlockAllDynamic`
   
   **변수 추가:**
   - `BuildingType` (Enum: House, Shop, Inn, etc.)
   - `HasInteractableDoor` (Boolean)
   
   **함수 추가:**
   - `OpenDoor` (문 열기 애니메이션)
   - `CloseDoor` (문 닫기 애니메이션)
   
   **Construction Script 설정:**
   - 건물 타입에 따라 적절한 메시 구성

5. **컴파일** 및 **저장**

### 9.2 BP_PGQuestZone 생성

1. **콘텐츠 브라우저** > **/UPlayground/Environment/Zones** 폴더로 이동
2. **우클릭** > **Blueprint Class** > **Actor** 선택
3. 이름을 `BP_PGQuestZone`로 설정하고 생성
4. 블루프린트 에디터에서:
   
   **컴포넌트 추가:**
   - **Add Component** > **Box** 선택
     - Name: `TriggerBox`
     - Transform > Location: `(0, 0, 0)`
     - Shape > X, Y, Z: 적절한 크기 설정
     - Collision > Collision Presets: `OverlapAllDynamic`
   
   - **Add Component** > **Text Render** 선택
     - Name: `ZoneNameText`
     - Transform > Location: `(0, 0, 200)`
     - Text > Text: "Zone Name"
     - Rendering > Hidden in Game: `True`
   
   **변수 추가:**
   - `ZoneName` (String)
   - `AssociatedQuestID` (Name)
   - `ObjectiveID` (Name)
   - `QuestManager` (Object Reference - UPGQuestManager)
   
   **함수 추가:**
   - `OnPlayerEnterZone` (플레이어 진입 처리)
   - `OnPlayerExitZone` (플레이어 이탈 처리)
   - `UpdateQuestObjective` (퀘스트 목표 업데이트)
   
   **Event Graph 설정:**
   - **Event BeginPlay**에서 퀘스트 매니저 참조 가져오기
   - **TriggerBox** 컴포넌트의 `OnComponentBeginOverlap`/`OnComponentEndOverlap` 이벤트 처리
   
   **Construction Script 설정:**
   - Zone Name 텍스트 업데이트

5. **컴파일** 및 **저장**

## 10. 게임플레이 에셋

### 10.1 BP_PGGameMode 생성

1. **콘텐츠 브라우저** > **/UPlayground/Blueprints** 폴더로 이동
2. **우클릭** > **Blueprint Class** > **Game Mode Base** 선택
3. 이름을 `BP_PGGameMode`로 설정하고 생성
4. 블루프린트 에디터에서:
   
   **클래스 기본값 설정:**
   - **Classes** 섹션에서:
     - Default Pawn Class: `BP_PGPlayerCharacter`
     - Player Controller Class: `BP_PGPlayerController`
     - HUD Class: 필요하다면 설정
   
   **함수 추가:**
   - `InitializeGameSystems` (게임 시스템 초기화)
   - `StartPlay` 오버라이드 (게임 시작 시 초기화)
   
   **Event Graph 설정:**
   - **Event BeginPlay**에서 게임 시스템 초기화

5. **컴파일** 및 **저장**

### 10.2 BP_PGGameInstance 생성

1. **콘텐츠 브라우저** > **/UPlayground/Blueprints** 폴더로 이동
2. **우클릭** > **Blueprint Class** > **Game Instance** 선택
3. 이름을 `BP_PGGameInstance`로 설정하고 생성
4. 블루프린트 에디터에서:
   
   **변수 추가:**
   - `ManagerSubsystem` (Object Reference - UPGManagerSubsystem)
   - `SaveGameData` (Object Reference - UPGSaveGame, 있다면)
   
   **함수 추가:**
   - `GetManagerSubsystem` (매니저 서브시스템 참조 반환)
   - `SaveGame` (게임 데이터 저장)
   - `LoadGame` (게임 데이터 로드)
   
   **Event Graph 설정:**
   - **Event Init**에서 초기 참조 설정

5. **컴파일** 및 **저장**

## 11. 테스트 레벨 구성

### 11.1 테스트 레벨 생성

1. **콘텐츠 브라우저** > **/UPlayground/Maps** 폴더로 이동
2. **우클릭** > **Level** 선택
3. 이름을 `PG_TestLevel`로 설정하고 생성
4. 레벨 에디터에서:
   
   **월드 설정:**
   - **World Settings** 패널 열기
   - **Game Mode** > **GameMode Override**: `BP_PGGameMode` 선택
   
   **기본 액터 배치:**
   - **PlayerStart** 액터 배치
   - **BP_PGDebugConsole** 액터 배치
   - **Directional Light** 설정
   - **Sky Atmosphere**, **Sky Light** 등 기본 환경 액터 설정

5. **저장**

### 11.2 지형 생성

1. **Modes** 패널에서 **Landscape** 도구 선택
2. 적절한 크기와 섹션 수로 기본 지형 생성
3. **Sculpt** 도구를 사용하여 지형 모델링:
   - 중앙 허브 지역 (평평한 공간)
   - 퀘스트 지역 (언덕, 계곡 등)
   - 경계 영역 (산맥, 강 등)
4. **Paint** 도구를 사용하여 텍스처 적용

### 11.3 지역 구성

1. **중앙 허브 지역:**
   - `BP_PGSimpleBuilding` 여러 개 배치
   - `BP_PGQuestNPC` 2-3개 배치
   - `BP_PGMerchantNPC` 1-2개 배치
   - 장식용 프롭 배치

2. **퀘스트 지역 1 (전투 구역):**
   - `BP_PGQuestZone` 설정
   - 적 스폰 포인트 설정
   - `BP_PGQuestInteractable` 배치

3. **퀘스트 지역 2 (수집 구역):**
   - `BP_PGQuestZone` 설정
   - `BP_PGItemPickup` 여러 개 배치

4. **퀘스트 지역 3 (탐험 구역):**
   - `BP_PGQuestZone` 설정
   - 목표 지점 표시

### 11.4 네비게이션 메시 빌드

1. **Window** > **AI Debugging** 열기
2. **Build** 버튼을 클릭하여 네비게이션 메시 생성

### 11.5 라이팅 빌드

1. **Build** > **Build Lighting** 선택
2. 라이팅 빌드 완료 후 저장

### 11.6 최종 저장 및 패키징

1. 레벨을 저장
2. **File** > **Package Project** > **Windows** (또는 원하는 플랫폼) 선택

이 문서는 UPlayground RPG 프로젝트의 테스트 레벨을 위한 모든 필요 에셋의 제작 과정을 상세히 다루고 있습니다. 필요에 따라 더 많은 에셋이나 기능을 추가할 수 있으며, 프로젝트의 특수성에 맞게 조정할 수 있습니다.